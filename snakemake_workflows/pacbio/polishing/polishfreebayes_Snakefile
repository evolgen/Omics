#!python

#!/usr/bin/env python3
import os
import sys
from glob import glob
from snakemake.utils import read_job_properties
import pdb

configfile:"config.json"

rule all:
    input:
        "variants.vcf.gz"

def get_chrvcfs(wildcards):
    inputs2 = []
    infile=open(config['reference_index'],"r")
    lines=infile.readlines()
    for names in lines:
        chroms=names.split('\t')[0]
        inputs2.append("by_chr/{chr}.vcf.gz".\
                format(chr=chroms))
    infile.close()
    return inputs2


def get_chrvcfids(wildcards):
    inputs3 = []
    infile3=open(config['reference_index'],"r")
    lines3=infile3.readlines()
    for names in lines3:
        chroms=names.split('\t')[0]
        inputs3.append("by_chr/{chr}.vcf.gz.tbi".\
                format(chr=chroms))
    infile3.close()
    return inputs3


rule variant_calling:
    input:
        bam="dedup.bam",
    output:
        vcfbychr="by_chr/{chr}.vcf.gz",
#        idvcfbychr="by_chr/{chr}.vcf.gz.tbi"
    params:
        slurm_opts=lambda wildcards: "-N 1 " \
                                "--time 72:00:00 " \
                                "-A co_genomicdata " \
                                "-c 1 " \
                                "--qos=savio_lowprio " \
                                "-p savio --mem=6300M " \
                                "-o logs/{chr}.log " \
                                "-J {chr} " \
                                .format(chr=wildcards.chr) 
    run:
        vcf_callers = """\
        source /global/scratch2/rohitkolora/miniconda3/etc/profile.d/conda.sh;
        module load samtools bcftools freebayes gcc;
        samtools view -bh {inputbam} {chr} \
                >by_chr/{chr}.bam;
        samtools index by_chr/{chr}.bam;        
        freebayes -f {reference_genome} -r {chr} \
                --min-coverage 8 \
                --exclude-unobserved-genotypes \
                --report-monomorphic \
                by_chr/{chr}.bam \
                -m 20 -q 10 -j -N | bgzip -c > \
                {outputvcfbychr};
        tabix -p vcf {outputvcfbychr};        
        """.format(reference_genome=config['reference_genome'], \
                   chr=wildcards.chr, outputvcfbychr=output.vcfbychr, \
                   inputbam=input.bam)
        shell(vcf_callers)


rule checking:
    input:
        vcfbychr="by_chr/{chr}.vcf.gz",
        bambychr="by_chr/{chr}.bam"
    output:
        vcfbychr="by_chr/{chr}.vcf.gz",
        idvcfbychr="by_chr/{chr}.vcf.gz.tbi"
    params:
        slurm_opts=lambda wildcards: "-N 1 " \
                                "--time 72:00:00 " \
                                "-A co_genomicdata " \
                                "-c 1 " \
                                "--qos=savio_lowprio " \
                                "-p savio --mem=6300M " \
                                "-o logs/{chr}.log " \
                                "-J {chr} " \
                                .format(chr=wildcards.chr)
    run:
        checker="""
        module load samtools bcftools vcftools freebayes gcc;
        if tabix -p vcf {vcfbychr}; then
            echo "{vcfbychr} - No problem";
        else
            samtools view -bh dedup.bam {chr} \
                >{bambychr};
            samtools index {bambychr};
            freebayes -f {reference_genome} -r {chr} \
                --min-coverage 8 \
                --exclude-unobserved-genotypes \
                --report-monomorphic \
                {bambychr} \
                -m 20 -q 10 -j -N | bgzip -c > \
                {outputvcfbychr};
            tabix -p vcf {outputvcfbychr};
        fi
        """.format(reference_genome=config['reference_genome'], \
                  vcfbychr=input.vcfbychr, \
                  bambychr=input.bambychr, \
                  chr=wildcards.chr, \
                  outputvcfbychr=output.vcfbychr)
        shell(checker)
        

rule combine_vcfs:
    input:
#        get_chrvcfids
        get_chrvcfs
    output:
        vcf="variants.vcf.gz",
    params:
        slurm_opts=lambda wildcards: "-N 1 " \
                                "--time 3-00:00:00 " \
                                "-A co_genomicdata " \
                                "-p savio3_bigmem " \
                                "--qos savio_lowprio " \
                                "-o logs/combine.log " \
                                "-J bigVCF " 
    run:
        sinfo=config["illumina_samples"]
        species, sample, identity = sinfo.split("/")
        combining_vcfs = """ \
#             touch {outputvcf};   
            module load vcftools bcftools;
            vcf-concat {input} | \
                bcftools reheader -s {sample} - | \
               bgzip -c > {outputvcf};
            tabix -p vcf {outputvcf};
        """.format(outputvcf=output.vcf, input=input, sample=wildcards.sample,
                species=wildcards.species, identity=wildcards.identity)
        shell(combining_vcfs)


