#!python

#!/usr/bin/env python3
import os
import sys
from glob import glob
from snakemake.utils import read_job_properties
import pdb

configfile:"config.json"

def get_inputs(wildcards):
    inputs = []
    sp1="umbrosus"
    for sp2 in config["genomes_by_species"]:
        if sp1==sp2:
            continue
        inputs.append("WGA/{sp1}/{sp1}.{sp2}.paf".format(sp1=sp1,sp2=sp2))
    return inputs

rule all:
    input:
        get_inputs

rule pairmap_genomes:
    input:
        reference=lambda wildcards: "{genome_path}"
                                    "/{sp1}_purged.t1.fasta"
                                    "".format(sp1=wildcards.sp1,
                                              genome_path=config['genome_path']),
        query=lambda wildcards: "{genome_path}"
                                "/{sp2}_purged.t1.fasta"
                                "".format(sp2=wildcards.sp2,
                                          genome_path=config['genome_path'])
    output:
        tmpaf="WGA/{sp1}/{sp1}.{sp2}.tmppaf",
        paf="WGA/{sp1}/{sp1}.{sp2}.paf",
        maf="WGA/{sp1}/{sp1}.{sp2}.maf"
    params:
        slurm_opts=lambda wildcards: "-n24 " \
                                     "--time 0-8:00:00 " \
                                     "-A co_genomicdata " \
#                                     "--qos=savio_lowprio " \
                                     "-p savio2_bigmem " \
#                                     "-oe logs/{sp2}-{sp1}.log " \
                                     "-J {sp2}-{sp1} " \
                                     .format(sp1=wildcards.sp1, sp2=wildcards.sp2)
    run:
        minimap2="""
        module load minimap2; 
        if [ ! -e "WGA/{sp1}/{sp1}.FAS" ]; then
            sed -e "/^>/ s/^>/>{sp1}./" {reference} > WGA/{sp1}/{sp1}.FAS;
        fi
        sed -e "/^>/ s/^>/>{sp2}./" {query} > WGA/{sp1}/{sp2}.FAS;
        minimap2 -t 32 -x asm20 --cs=long -Lc \
                WGA/{sp1}/{sp1}.FAS \
                WGA/{sp1}/{sp2}.FAS \
                >{tmpaf};
        sort --parallel=32 \
                -k6,6 -k8,8n -k9,9nr \
                {tmpaf} >{outputpaf};
        rm {tmpaf} ;       
        paftools.js view -f maf {outputpaf} \
                >{outputmaf};
        """.format(sp2=wildcards.sp2, sp1=wildcards.sp1,
                reference=input.reference, query=input.query,
                outputpaf=output.paf, outputmaf=output.maf,
                tmpaf=output.tmpaf)
        shell(minimap2)

