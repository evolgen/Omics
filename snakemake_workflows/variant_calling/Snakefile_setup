#!python

#!/usr/bin/env python3
import os
import json
import sys
from glob import glob
from snakemake.utils import read_job_properties
import pdb

configfile:"pathchange_config.json"

def get_inputs(wildcards):
    inputs = []
    for sinfo in config["illumina_samples"]:
        pattern = "calls/{species}/{sample}/{identity}/config.json"
        species, sample, identity = sinfo.split("/")
        inputs.append(pattern.format\
            (species=species,sample=sample,identity=identity))
    return inputs


rule all:
    input:
        get_inputs

rule create_config:
    output:
        "calls/{species}/{sample}/{identity}/config.json",
        directory("calls/{species}/{sample}/{identity}/logs")
    params:
        slurm_opts=lambda wildcards: "-N 1 " \
                                    "--time 0-24:00:00 " \
                                    "-A co_genomicdata " \
                                    "--qos=savio_lowprio " \
                                    "-p savio2_htc " \
                                    "-o logs/creation.log " \
                                    "-J configging " 
    run:
        sample_string = "{species}/{sample}/{identity}"\
                        .format(species=wildcards.species, sample=wildcards.sample, identity=wildcards.identity)
        jout = {
                "working_path" : config['working_path'],
                "reference_genome" : config['reference_genome'],
                "reference_index" : config['reference_index'],
                "genome_path" : config['genome_path'],
                "illumina_samples" : sample_string
            }
        open(output[0],'w').write(json.dumps(jout, sort_keys = False, indent=2))
        shell("ln -sf /global/home/users/rohitkolora/RGP/snakemake_workflows/variant_calling/persample_vcfcall_Snakefile \
                {working_path}/calls/{species}/{sample}/{identity}/Snakefile".format(\
                working_path=config['working_path'],\
                species=wildcards.species, sample=wildcards.sample, identity=wildcards.identity))
        shell("mkdir -p {output[1]}")


