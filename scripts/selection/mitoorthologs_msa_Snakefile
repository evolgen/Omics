#!/usr/bin/env python3

work_dir = "/global/scratch2/rohitkolora/Rockfish/Genomes/Selection/mitogenome/nooutgroup"

SAMPLES, = glob_wildcards("/global/scratch2/rohitkolora/Rockfish/Genomes/Selection/mitogenome/nooutgroup/{sample}.FAS")

rule all:
    input:
        expand("/global/scratch2/rohitkolora/Rockfish/Genomes/Selection/mitogenome/sequence_files/{sample}/hyphy2.done", sample=SAMPLES)

rule align:
    input:
        cds = "/global/scratch2/rohitkolora/Rockfish/Genomes/Selection/mitogenome/nooutgroup/{sample}.FAS",
        species_tree = "/global/home/users/rohitkolora/RGP/scripts/selection/species_tree.alascanus.newick",
    output:
        extract = "/global/scratch2/rohitkolora/Rockfish/Genomes/Selection/mitogenome/sequence_files/{sample}/seq.fasta",
        align_nt = "/global/scratch2/rohitkolora/Rockfish/Genomes/Selection/mitogenome/sequence_files/{sample}/cds.seq.msa",
        align_aa = "/global/scratch2/rohitkolora/Rockfish/Genomes/Selection/mitogenome/sequence_files/{sample}/pep.seq.msa",
        out_tree = "/global/scratch2/rohitkolora/Rockfish/Genomes/Selection/mitogenome/sequence_files/{sample}/cds.seq.tree",
        logger = "/global/scratch2/rohitkolora/Rockfish/Genomes/Selection/mitogenome/sequence_files/{sample}/aln1.done",
    params:
        slurm_opts=lambda wildcards: "-N1 " \
                                     "--time 3-00:00:00 " \
                                    "-A co_genomicdata " \
                                     "--qos=savio_lowprio " \
                                     "-p savio,savio2 " \
                                     "-o /global/scratch2/rohitkolora/Rockfish/Genomes/Selection/mitogenome/logs/mt_{sample}.log " \
                                     "-J mt_{sample} " \
                                     .format(sample=wildcards.sample)
    run:
        shell("""
            module load samtools trimal gcc java macse muscle emboss ;
            cd $(dirname "{extract}" ) ;
            printf "  Testing sequences\n" ;
            bash ~/RGP/scripts/selection/premsa_munger.20200624.sh \
                    {cds} {extract} Vertebrate-mtDNA ;
            printf "  Running premsa for Hyphy\n";        
            hyphy /global/scratch2/rohitkolora/Software/hyphy-develop/hyphy-analyses-master/codon-msa/pre-msa.bf \
                    --input {extract}.orf --code Vertebrate-mtDNA --E 0.6 ;
            muscle -in {extract}.orf_protein.fas -out {align_aa}.out ;       
            printf "  Post-msa filtering\n";
            hyphy /global/scratch2/rohitkolora/Software/hyphy-develop/hyphy-analyses-master/codon-msa/post-msa.bf \
                    --protein-msa {align_aa}.out \
                    --nucleotide-sequences {extract}.orf_nuc.fas \
                    --code Vertebrate-mtDNA \
                    --output {align_nt}.out ;
            sed -e '/^>/ s/_[0-9].*//' {align_nt}.out >{align_nt} ; 
            sed -e '/^>/ s/_[0-9].*//' {align_aa}.out >{align_aa} ;
            samtools faidx {align_nt} ;
            printf "  Creating tree based on alignments\n" ;
            Rscript ~/RGP/scripts/selection/speciestree_convert.R \
                    {species_tree} {align_nt}.fai {out_tree} ;
            echo "" > {logger} ;
            """.format(cds=input.cds, logger=output.logger, sample=wildcards.sample, #work_dir=work_dir,
                       extract=output.extract, align_nt=output.align_nt, align_aa=output.align_aa, 
                       species_tree=input.species_tree, out_tree=output.out_tree))

rule hyphy1:
    input:
        cds = "/global/scratch2/rohitkolora/Rockfish/Genomes/Selection/mitogenome/nooutgroup/{sample}.FAS",
        species_tree = "/global/home/users/rohitkolora/RGP/scripts/selection/species_tree.alascanus.newick",
        extract = "/global/scratch2/rohitkolora/Rockfish/Genomes/Selection/mitogenome/sequence_files/{sample}/seq.fasta",
        align_nt = "/global/scratch2/rohitkolora/Rockfish/Genomes/Selection/mitogenome/sequence_files/{sample}/cds.seq.msa",
        align_aa = "/global/scratch2/rohitkolora/Rockfish/Genomes/Selection/mitogenome/sequence_files/{sample}/pep.seq.msa",
        out_tree = "/global/scratch2/rohitkolora/Rockfish/Genomes/Selection/mitogenome/sequence_files/{sample}/cds.seq.tree",
    output:    
        logger = "/global/scratch2/rohitkolora/Rockfish/Genomes/Selection/mitogenome/sequence_files/{sample}/hyphy1.done",
    params:
        slurm_opts=lambda wildcards: "-N1 " \
                                     "--time 3-00:00:00 " \
                                    "-A co_genomicdata " \
                                     "--qos=savio_lowprio " \
                                     "-p savio,savio2 " \
                                     "-o /global/scratch2/rohitkolora/Rockfish/Genomes/Selection/mitogenome/logs/mt_{sample}.log " \
                                     "-J mt_{sample} " \
                                     .format(sample=wildcards.sample)
    run:
        shell("""
            module load samtools trimal gcc java macse muscle emboss ;
            cd $(dirname "{extract}" ) ;
            printf " Creating dNdS trees\n" ;        
            bash ~/RGP/scripts/selection/hyphy_dnds.run.sh Vertebrate-mtDNA \
                    {align_nt} {out_tree} {sample} ;        
            echo "" > {logger} ;
            """.format(cds=input.cds, logger=output.logger, sample=wildcards.sample, #work_dir=work_dir,
                       extract=input.extract, align_nt=input.align_nt, align_aa=input.align_aa, 
                       species_tree=input.species_tree, out_tree=input.out_tree))

rule hyphy2:
    input:
        cds = "/global/scratch2/rohitkolora/Rockfish/Genomes/Selection/mitogenome/nooutgroup/{sample}.FAS",
        species_tree = "/global/home/users/rohitkolora/RGP/scripts/selection/species_tree.alascanus.newick",
        extract = "/global/scratch2/rohitkolora/Rockfish/Genomes/Selection/mitogenome/sequence_files/{sample}/seq.fasta",
        align_nt = "/global/scratch2/rohitkolora/Rockfish/Genomes/Selection/mitogenome/sequence_files/{sample}/cds.seq.msa",
        align_aa = "/global/scratch2/rohitkolora/Rockfish/Genomes/Selection/mitogenome/sequence_files/{sample}/pep.seq.msa",
        out_tree = "/global/scratch2/rohitkolora/Rockfish/Genomes/Selection/mitogenome/sequence_files/{sample}/cds.seq.tree",
        inlogger = "/global/scratch2/rohitkolora/Rockfish/Genomes/Selection/mitogenome/sequence_files/{sample}/hyphy1.done",
    output:    
        logger = "/global/scratch2/rohitkolora/Rockfish/Genomes/Selection/mitogenome/sequence_files/{sample}/hyphy2.done",
    params:
        slurm_opts=lambda wildcards: "-N1 " \
                                     "--time 3-00:00:00 " \
                                    "-A co_genomicdata " \
                                     "--qos=savio_lowprio " \
                                     "-p savio,savio2 " \
                                     "-o /global/scratch2/rohitkolora/Rockfish/Genomes/Selection/mitogenome/logs/mt_{sample}.log " \
                                     "-J mt_{sample} " \
                                     .format(sample=wildcards.sample)
    run:
        shell("""
            module load samtools trimal gcc java macse muscle emboss ;
            cd $(dirname "{extract}" ) ;
            mkdir -p absrel busted fel meme gard relax ;
            cd absrel ;
            printf "\tRunning aBSREL\n";
            hyphy aBSREL --code Vertebrate-mtDNA --alignment {align_nt} --tree {out_tree} --branches All --pvalue 0.05 \
                --output output.json --save-fit output.fit 1>LOG 2>&1 ; cd ../ ;
            c5d busted ;    
            printf "\tRunning BUSTED\n";
            hyphy busted --code Vertebrate-mtDNA --alignment {align_nt} --tree {out_tree} --branches All --pvalue 0.05 \
                --output output.json --save-fit output.fit 1>LOG 2>&1 ; cd ../ ;
            cd fel ;
            printf "\tRunning FEL\n";
            hyphy fel --code Vertebrate-mtDNA --alignment {align_nt} --tree {out_tree} --branches All --pvalue 0.05 \
                --output output.json --save-fit output.fit 1>LOG 2>&1 ; cd ../ ;    
            cd meme ;    
            printf "\tRunning MEME\n";
            hyphy meme --code Vertebrate-mtDNA --alignment {align_nt} --tree {out_tree} --branches All --pvalue 0.05 \
                --output output.json --save-fit output.fit 1>LOG 2>&1 ; cd ../ ;    
            #cd gard ;
            #hyphy GARD --code Vertebrate-mtDNA --type codon --alignment {align_nt} --output gard.json --output-lf gard.out \
            #        --rate-classes 3 1>LOG 2>&1 ; cd ../ ;
            echo "" > {logger} ;
            """.format(cds=input.cds, logger=output.logger, sample=wildcards.sample, #work_dir=work_dir,
                       extract=input.extract, align_nt=input.align_nt, align_aa=input.align_aa, 
                       species_tree=input.species_tree, out_tree=input.out_tree))

