insertion<-matrix(c(33,274,2111,6601),nrow=2, byrow="F")
inversion<-matrix(c(13,294,173,8539),nrow=2, byrow="F")
GR<-matrix(c(95,212,4138,4574),nrow=2, byrow="F")
exact.test(deletion, model="binomial", alternative="greater", method="Z-unpooled", to.plot=FALSE)
exact.test(deletion, model="binomial", alternative="less", method="Z-unpooled", to.plot=FALSE)
exact.test(duplication, model="binomial", alternative="greater", method="Z-unpooled", to.plot=FALSE)
exact.test(duplication, model="binomial", alternative="less", method="Z-unpooled", to.plot=FALSE)
exact.test(insertion, model="binomial", alternative="greater", method="Z-unpooled", to.plot=FALSE)
exact.test(insertion, model="binomial", alternative="less", method="Z-unpooled", to.plot=FALSE)
exact.test(inversion, model="binomial", alternative="greater", method="Z-unpooled", to.plot=FALSE)
exact.test(inversion, model="binomial", alternative="less", method="Z-unpooled", to.plot=FALSE)
exact.test(GR, model="binomial", alternative="greater", method="Z-unpooled", to.plot=FALSE)
exact.test(GR, model="binomial", alternative="less", method="Z-unpooled", to.plot=FALSE)
GR
#GR<-matrix(c(95,212,4138,4574),nrow=2, byrow="F")
cpgW<-matrix(c(44,30,9049,9098),nrow=2, byrow="F")
exact.test(cpgW, model="binomial", alternative="less", method="Z-unpooled", to.plot=FALSE)
exact.test(cpgW, model="binomial", alternative="greater", method="Z-unpooled", to.plot=FALSE)
library(Barnard)
library(Exact)
library(exact2x2)
library(XNomial)
#deletion<-matrix(c(70,237,3301,5411),nrow=2, byrow="F")
deletion<-matrix(c(3301,5411,70,237),nrow=2, byrow="F")
exact.test(deletion, model="binomial", alternative="greater", method="Z-unpooled", to.plot=FALSE)
insertion<-matrix(c(2111,6601,33,274),nrow=2, byrow="F")
exact.test(insertion, model="binomial", alternative="greater", method="Z-unpooled", to.plot=FALSE)
inversion<-matrix(c(8,140,77,1801),nrow=2, byrow="F")
exact.test(inversion, model="binomial", alternative="greater", method="Z-pooled", to.plot=FALSE)
exact.test(inversion, model="binomial", alternative="lesser", method="Z-pooled", to.plot=FALSE)
exact.test(inversion, model="binomial", alternative="less", method="Z-pooled", to.plot=FALSE)
exact.test(inversion, model="binomial", alternative="greater", method="Z-unpooled", to.plot=FALSE)
exact.test(inversion, model="binomial", alternative="greater", method="Z-unpooled", to.plot=FALSE)
inversion<-matrix(c(13,294,173,8539),nrow=2, byrow="F")
exact.test(inversion, model="binomial", alternative="greater", method="Z-unpooled", to.plot=FALSE)
exact.test(inversion, model="binomial", alternative="greater", method="Z-pooled", to.plot=FALSE)
deletion<-matrix(c(70,237,3301,5411),nrow=2, byrow="F")
duplication<-matrix(c(12,295,249,8463),nrow=2, byrow="F")
insertion<-matrix(c(33,274,2111,6601),nrow=2, byrow="F")
inversion<-matrix(c(13,294,173,8539),nrow=2, byrow="F")
GR<-matrix(c(95,212,4138,4574),nrow=2, byrow="F")
exact.test(inversion, model="binomial", alternative="greater", method="Z-pooled", to.plot=FALSE)
exact.test(deletion, model="binomial", alternative="less", method="Z-pooled", to.plot=FALSE)
exact.test(duplication, model="binomial", alternative="less", method="Z-pooled", to.plot=FALSE)
#exact.test(insertion, model="binomial", alternative="less", method="Z-pooled", to.plot=FALSE)
exact.test(duplication, model="binomial", alternative="greater", method="Z-pooled", to.plot=FALSE)
exact.test(insertion, model="binomial", alternative="less", method="Z-pooled", to.plot=FALSE)
biocLite("intansv")
source("https://bioconductor.org/biocLite.R")
biocLite("intansv")
install.packages("~/Downloads/packages_r/intansv_1.18.0.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/packages_r/ggbio_1.26.0.tar.gz", repos = NULL, type = "source")
install.packages(c("GGally", "EnsembleBase"))
install.packages("~/Downloads/packages_r/ggbio_1.26.0.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/packages_r/biovizBase_1.26.0.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/packages_r/GenomicFeatures_1.30.3.tar.gz", repos = NULL, type = "source")
install.packages("RMySQL")
install.packages("~/Downloads/packages_r/RMySQL_0.10.14.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/packages_r/RMySQL_0.10.14.tar.gz", repos = NULL, type = "source")
install.packages(c("digest", "Rcpp", "rlang", "tidyselect", "XML"))
install.packages("~/Downloads/packages_r/RMySQL_0.10.14.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/packages_r/RMySQL_0.10.14.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/packages_r/GenomicFeatures_1.30.3.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/packages_r/GenomicRanges_1.30.3.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/packages_r/GenomicRanges_1.30.3.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/packages_r/GenomicAlignments_1.14.1.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/packages_r/GenomicAlignments_1.14.1.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/packages_r/ggbio_1.26.0.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/packages_r/biovizBase_1.26.0.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/packages_r/GenomicFeatures_1.30.3.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/packages_r/AnnotationDbi_1.40.0.tar.gz", repos = NULL, type = "source")
install.packages("tibble")
install.packages("~/Downloads/packages_r/AnnotationDbi_1.40.0.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/packages_r/ggbio_1.26.0.tar.gz", repos = NULL, type = "source")
install.packages("GGally")
install.packages("~/Downloads/packages_r/OrganismDbi_1.20.0.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/packages_r/OrganismDbi_1.20.0.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/packages_r/GenomicFeatures_1.30.3.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/packages_r/ensembldb_2.2.2.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/packages_r/AnnotationHub_2.10.1.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/packages_r/ensembldb_2.2.2.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/packages_r/GenomicFeatures_1.30.3.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/packages_r/ensembldb_2.2.2.tar.gz", repos = NULL, type = "source")
library("GenomicFeatures", lib.loc="~/R/x86_64-redhat-linux-gnu-library/3.4")
library("GenomicAlignments", lib.loc="~/R/x86_64-redhat-linux-gnu-library/3.4")
detach("package:GenomicRanges", unload=TRUE)
library("GenomicRanges", lib.loc="~/R/x86_64-redhat-linux-gnu-library/3.4")
detach("package:GenomicFeatures", unload=TRUE)
library("GenomicFeatures", lib.loc="~/R/x86_64-redhat-linux-gnu-library/3.4")
#install.packages("~/Downloads/packages_r/ensembldb_2.2.2.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/packages_r/ggbio_1.26.0.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/packages_r/biovizBase_1.26.0.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/packages_r/VariantAnnotation_1.24.5.tar.gz", repos = NULL, type = "source")
update("BSgenome")
update('BSgenome')
update.packages("BSgenome")
detach("package:GenomicRanges", unload=TRUE)
library("BSgenome", lib.loc="/local64/usr_local/lib/R/library")
update.packages("BSgenome")
library("intansv", lib.loc="~/R/x86_64-redhat-linux-gnu-library/3.4")
library("ggbio", lib.loc="~/R/x86_64-redhat-linux-gnu-library/3.4")
library("ggbio", lib.loc="~/R/x86_64-redhat-linux-gnu-library/3.4")
library("ggbio", lib.loc="~/R/x86_64-redhat-linux-gnu-library/3.4")
detach("package:ggbio", unload=TRUE)
library("ggbio", lib.loc="~/R/x86_64-redhat-linux-gnu-library/3.4")
detach("package:ggbio", unload=TRUE)
library("Matrix", lib.loc="~/R/x86_64-redhat-linux-gnu-library/3.4")
detach("package:Matrix", unload=TRUE)
update.packages("Matrix")
library("Matrix", lib.loc="~/R/x86_64-redhat-linux-gnu-library/3.4")
detach("package:Matrix", unload=TRUE)
remove.packages("Matrix")
install.packages("Matrix")
library("Matrix", lib.loc="~/R/x86_64-redhat-linux-gnu-library/3.4")
detach("package:Matrix", unload=TRUE)
library("Matrix", lib.loc="~/R/x86_64-redhat-linux-gnu-library/3.4")
library("intansv", lib.loc="~/R/x86_64-redhat-linux-gnu-library/3.4")
library("ggbio", lib.loc="~/R/x86_64-redhat-linux-gnu-library/3.4")
remove.packages("acepack")
install.packages("acepack")
library("ggbio", lib.loc="~/R/x86_64-redhat-linux-gnu-library/3.4")
library("ggbio", lib.loc="~/R/x86_64-redhat-linux-gnu-library/3.4")
remove.packages("Hmisc")
install.packages("Hmisc")
library("ggbio", lib.loc="~/R/x86_64-redhat-linux-gnu-library/3.4")
remove.packages("RMySQL")
install.packages("RMySQL")
library("ggbio", lib.loc="~/R/x86_64-redhat-linux-gnu-library/3.4")
detach("package:ggbio", unload=TRUE)
remove.packages("RMySQL")
install.packages("RMySQL")
R CMD INSTALL RMySQL_0.10.14.tar.gz --library=/homes/biertank/rohit/R/x86_64-redhat-linux-gnu-library/3.4 --configure-vars='INCLUDE_DIR=/scr/bloodymary/rohit/mariadb/include/mysql LIB_DIR=/scr/bloodymary/rohit/mariadb/lib/'
#R CMD INSTALL RMySQL_0.10.14.tar.gz --library=/homes/biertank/rohit/R/x86_64-redhat-linux-gnu-library/3.4 --configure-vars='INCLUDE_DIR=/scr/bloodymary/rohit/mariadb/include/mysql LIB_DIR=/scr/bloodymary/rohit/mariadb/lib/'
install.packages("RMySQL")
install.packages("RMySQL")
library("RMySQL", lib.loc="~/R/x86_64-redhat-linux-gnu-library/3.4")
remove.packages("RMySQL")
install.packages("RMySQL")
library("RMySQL", lib.loc="~/R/x86_64-redhat-linux-gnu-library/3.4")
detach("package:RMySQL", unload=TRUE)
library("RMySQL", lib.loc="~/R/x86_64-redhat-linux-gnu-library/3.4")
detach("package:RMySQL", unload=TRUE)
library("RMySQL", lib.loc="~/R/x86_64-redhat-linux-gnu-library/3.4")
Sys.getenv()
library("RMySQL", lib.loc="~/R/x86_64-redhat-linux-gnu-library/3.4")
Sys.getenv()
Sys.getenv()
library("RMySQL", lib.loc="~/R/x86_64-redhat-linux-gnu-library/3.4")
library("RMySQL", lib.loc="~/R/x86_64-redhat-linux-gnu-library/3.4")
library(qvalue)
source("http://bioconductor.org/biocLite.R")
biocLite("qvalue",lib="~/R/x86_64-pc-linux-gnu-library/3.2/")
library(qvalue)
#p <- scan("/scr/bloodymary/rohit/Lacerta_viridis/pvalue_boschloo.txt", na.strings=T)
p <- scan("/scr/bloodymary/rohit/Lacerta_viridis/pvalue_barnards.txt", na.strings=T)
### 1) Use qvalue package if you have many values
#qobj <- qvalue(p = p, fdr.level=0.05)
#write.table(qobj$qvalues, file="/scr/bloodymary/rohit/Lacerta_viridis/SVs/boschloo_qvalues.txt")
qobj <- qvalue(p = p, fdr.level=0.05)
write.table(qobj$qvalues, file="/scr/bloodymary/rohit/Lacerta_viridis/SVs/barnards_qvalues.txt")
### 2) Use p.adjust if you have less values
qobj <- p.adjust(p, method = "BH", n = length(p))
write.table(qobj, file="/scr/bloodymary/rohit/Lacerta_viridis/SVs/barnards_qvalues.txt.BH")
qobj <- p.adjust(p, method = "fdr", n = length(p))
write.table(qobj, file="/scr/bloodymary/rohit/Lacerta_viridis/SVs/barnards_qvalues.txt.fdr")
### 1) Use qvalue package if you have many values
#qobj <- qvalue(p = p, fdr.level=0.05)
#write.table(qobj$qvalues, file="/scr/bloodymary/rohit/Lacerta_viridis/SVs/boschloo_qvalues.txt")
qobj <- qvalue(p = p, fdr.level=0.01)
write.table(qobj$qvalues, file="/scr/bloodymary/rohit/Lacerta_viridis/SVs/barnards_qvalues.txt")
qobj <- p.adjust(p, method = "BY", n = length(p))
write.table(qobj, file="/scr/bloodymary/rohit/Lacerta_viridis/SVs/barnards_qvalues.txt.BY")
qvalue(p = p, fdr.level=0.01)
install.packages("phangorn")
install.packages("igraph")
library(phangorn)
library(phangorn)
library(parallel)
install.packages("phangorn")
library(geneplotter)
library(ggplot2)
library(plyr)
library(LSD)
library(RcppArmadillo)
library(DESeq2)
#library(gplots)
library(RColorBrewer)
library(pheatmap)
library(PoiClaClu)
library(stringr)
#library(topGO)
library(genefilter)
library(biomaRt)
library(dplyr)
#library(EDASeq)
library(fdrtool)
library(gridExtra)
library(data.table)
library(tidyr)
library(vsn)
library(ggpubr)
directory <- file.path("/scr/k70san/rohit/Lacertidae/splicing/pooled/ALL/HTseq/TRIAD/Counts")
sampleFiles <- list.files(path="/scr/k70san/rohit/Lacertidae/splicing/pooled/ALL/HTseq/TRIAD/Counts",pattern="^new_features_")
dds<-read.table("/scr/k70san/rohit/Lacertidae/splicing/pooled/ALL/HTseq/TRIAD/Counts/SampleTable.txt",
header=T, sep = "\t")
View(dds)
dds<-DESeqDataSetFromHTSeqCount(sampleTable=dds, directory=directory, design=~condition)
dds <- dds[ rowSums(counts(dds)) > 100, ]
dds <- DESeq(dds, test="LRT", reduced=~1)
resultsNames(dds)
res_Self_ADR <- results(dds, contrast=c("group","Self","ADR"))
res_Self_ADR <- results(dds, contrast=c("condition","Self","ADR"))
genes_Self_ADR <- data.frame(res_Self_ADR[which(res_Self_ADR$padj < 0.05 &
res_Self_ADR$log2FoldChange > 1.6),])
res_Self_Cross <- results(dds, contrast=c("condition","Self","Cross"))
genes_Self_Cross <- data.frame(res_Self_Cross[which(res_Self_Cross$padj < 0.05 &
res_Self_Cross$log2FoldChange > 1.6),])
setDT(genes_Self_ADR,keep.rownames="GENES",key="GENES")
setDT(genes_Self_Cross,keep.rownames="GENES",key="GENES")
genes_Self_specific<-genes_Self_ADR[genes_Self_Cross,nomatch=0L]
genes_Self_specific<- genes_Self_specific %>% drop_na()
write.table(genes_Self_specific[-1,1], file='Genes_Viridis_specific.txt')
res_Cross_ADR <- results(dds, contrast=c("condition","Cross","ADR"))
genes_Cross_ADR <- data.frame(res_Cross_ADR[which(res_Cross_ADR$padj < 0.05 &
res_Cross_ADR$log2FoldChange > 1.6),])
res_Cross_Self <- results(dds, contrast=c("condition","Cross","Self"))
genes_Cross_Self <- data.frame(res_Cross_Self[which(res_Cross_Self$padj < 0.05 &
res_Cross_Self$log2FoldChange > 1.6),])
setDT(genes_Cross_ADR,keep.rownames="GENES",key="GENES")
setDT(genes_Cross_Self,keep.rownames="GENES",key="GENES")
genes_Cross_specific<-genes_Cross_ADR[genes_Cross_Self,nomatch=0L]
genes_Cross_specific<- genes_Cross_specific %>% drop_na()
write.table(genes_Cross_specific[-1,1], file='Genes_Bilineata_specific.txt')
res_ADR_Cross <- results(dds, contrast=c("condition","ADR","Cross"))
genes_ADR_Cross <- data.frame(res_ADR_Cross[which(res_ADR_Cross$padj < 0.05 &
res_ADR_Cross$log2FoldChange > 1.6),])
res_ADR_Self <- results(dds, contrast=c("condition","ADR","Self"))
genes_ADR_Self <- data.frame(res_ADR_Self[which(res_ADR_Self$padj < 0.05 &
res_ADR_Self$log2FoldChange > 1.6),])
setDT(genes_ADR_Cross,keep.rownames="GENES",key="GENES")
setDT(genes_ADR_Self,keep.rownames="GENES",key="GENES")
genes_ADR_specific<-genes_ADR_Cross[genes_ADR_Self,nomatch=0L]
genes_ADR_specific <- genes_ADR_specific %>% drop_na()
write.table(genes_ADR_specific[-1,1], file='Genes_Adriatic_specific.txt')
rld <- rlog(dds, blind=FALSE)
vsd <- vst(dds, blind=FALSE)
head(assay(vsd), 3)
ntd <- normTransform(dds)
meanSdPlot(assay(ntd))
plotrld<-plotPCA(rld)
plotvsd<-plotPCA(vsd)
grid.arrange(grobs = list(plotrld, plotvsd), ncol=2)
library(ggplot2)
library(ggrepel)
data1 <- read.csv("/scr/k61san/nowicklab/SV-detection/BLAT/FINAL/input_ROC.txt", sep="\t", header = TRUE)
plot1 <- ggplot(data1, aes(x=data1$FPR, y=data1$TPR, group=data1$Tool,shape=data1$Tool)) +
geom_line() + geom_point(aes(colour=data1$Tool))
data2 <- read.csv("/scr/k61san/nowicklab/SV-detection/BLAT/FINAL/input_PR.txt", sep="\t", header = TRUE)
plot2 <- ggplot(data2, aes(x=data2$Recall, y=data2$Precision, color=factor(data2$Tool),shape=factor(data2$Tool))) +
labs(title="(A)                                            ") +
geom_line() + geom_point() + theme_bw() +
#  theme(axis.title.x = element_text(face = 'bold'),
#                                    axis.title.y = element_text(face = 'bold')) +
ylab("Precision (TP/(TP+FP))") + xlab("Recall (TP/(TP+FN))") + theme(legend.position = "bottom",legend.title=element_blank())
data3 <- read.csv("/scr/k61san/nowicklab/SV-detection/BLAT/FINAL/input_PPV.txt", sep="\t", header = TRUE)
plot3 <- ggplot(data3, aes(x=data3$PPV, y=data3$Sensitivity, label=data3$Tool)) +
labs(title="(B)                                            ") +
geom_point(aes(shape=factor(data3$Tool)), size=3.5, show.legend=F) +
#  geom_point(aes(color=factor(data3$Threshold)), show.legend=F) +
geom_path(aes(color=factor(data3$Tool)), show.legend=T) +
#  geom_point(colour = "black", size = 1.5) +
scale_linetype_manual("", values=c(1,2,3,4)) +
scale_shape_manual("",
values=c(8,9,0,3)) +
scale_color_discrete(name="") +
theme_bw() + #geom_text_repel(point.padding = NA) +
labs(y = "Sensitivity (TP/(TP+FN))", x= "PPV (TP/(TP+FP))") + #, title="Sensitivity and PPV in relation in called Inversions") +
theme(legend.position = "bottom", legend.title=element_blank())
grid.arrange(grobs = list(plot2, plot3), ncol=2)
grid.arrange(grobs = list(plot2, plot3), ncol=2)
library(gridExtra)
grid.arrange(grobs = list(plot2, plot3), ncol=2)
plot2 <- ggplot(data2, aes(x=data2$Recall, y=data2$Precision, color=factor(data2$Tool),shape=factor(data2$Tool))) +
labs(title="(A)                                            ") +
geom_line() + geom_point() + theme_bw() +
#  theme(axis.title.x = element_text(face = 'bold'),
#                                    axis.title.y = element_text(face = 'bold')) +
ylab("Precision (TP/(TP+FP))") + xlab("Recall (TP/(TP+FN))") +
theme(legend.position = "bottom",legend.title=element_blank(), axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"))
plot3 <- ggplot(data3, aes(x=data3$PPV, y=data3$Sensitivity, label=data3$Tool)) +
labs(title="(B)                                            ") +
geom_point(aes(shape=factor(data3$Tool)), size=3.5, show.legend=F) +
#  geom_point(aes(color=factor(data3$Threshold)), show.legend=F) +
geom_path(aes(color=factor(data3$Tool)), show.legend=T) +
#  geom_point(colour = "black", size = 1.5) +
scale_linetype_manual("", values=c(1,2,3,4)) +
scale_shape_manual("",
values=c(8,9,0,3)) +
scale_color_discrete(name="") +
theme_bw() + #geom_text_repel(point.padding = NA) +
labs(y = "Sensitivity (TP/(TP+FN))", x= "PPV (TP/(TP+FP))") + #, title="Sensitivity and PPV in relation in called Inversions") +
theme(legend.position = "bottom", legend.title=element_blank(), axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"))
grid.arrange(grobs = list(plot2, plot3), ncol=2)
plot2 <- ggplot(data2, aes(x=data2$Recall, y=data2$Precision, color=factor(data2$Tool),shape=factor(data2$Tool))) +
labs(title="(A)                                            ") +
geom_line() + geom_point() + theme_bw() +
#  theme(axis.title.x = element_text(face = 'bold'),
#                                    axis.title.y = element_text(face = 'bold')) +
ylab("Precision (TP/(TP+FP))") + xlab("Recall (TP/(TP+FN))") +
theme(legend.position = "bottom",legend.title=element_blank(), axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"), legend.text=element_text(size=14))
plot3 <- ggplot(data3, aes(x=data3$PPV, y=data3$Sensitivity, label=data3$Tool)) +
labs(title="(B)                                            ") +
geom_point(aes(shape=factor(data3$Tool)), size=3.5, show.legend=F) +
#  geom_point(aes(color=factor(data3$Threshold)), show.legend=F) +
geom_path(aes(color=factor(data3$Tool)), show.legend=T) +
#  geom_point(colour = "black", size = 1.5) +
scale_linetype_manual("", values=c(1,2,3,4)) +
scale_shape_manual("",
values=c(8,9,0,3)) +
scale_color_discrete(name="") +
theme_bw() + #geom_text_repel(point.padding = NA) +
labs(y = "Sensitivity (TP/(TP+FN))", x= "PPV (TP/(TP+FP))") + #, title="Sensitivity and PPV in relation in called Inversions") +
theme(legend.position = "bottom", legend.title=element_blank(), axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"), legend.text=element_text(size=14))
grid.arrange(grobs = list(plot2, plot3), ncol=2)
plot2 <- ggplot(data2, aes(x=data2$Recall, y=data2$Precision, color=factor(data2$Tool),shape=factor(data2$Tool))) +
labs(title="(A)                                            ") +
geom_line() + geom_point() + theme_bw() +
#  theme(axis.title.x = element_text(face = 'bold'),
#                                    axis.title.y = element_text(face = 'bold')) +
ylab("Precision (TP/(TP+FP))") + xlab("Recall (TP/(TP+FN))") +
theme(legend.position = "bottom",legend.title=element_blank(), axis.text=element_text(size=12,face="bold"),
axis.title=element_text(size=14,face="bold"), legend.text=element_text(size=14,face="bold"))
plot3 <- ggplot(data3, aes(x=data3$PPV, y=data3$Sensitivity, label=data3$Tool)) +
labs(title="(B)                                            ") +
geom_point(aes(shape=factor(data3$Tool)), size=3.5, show.legend=F) +
#  geom_point(aes(color=factor(data3$Threshold)), show.legend=F) +
geom_path(aes(color=factor(data3$Tool)), show.legend=T) +
#  geom_point(colour = "black", size = 1.5) +
scale_linetype_manual("", values=c(1,2,3,4)) +
scale_shape_manual("",
values=c(8,9,0,3)) +
scale_color_discrete(name="") +
theme_bw() + #geom_text_repel(point.padding = NA) +
labs(y = "Sensitivity (TP/(TP+FN))", x= "PPV (TP/(TP+FP))") + #, title="Sensitivity and PPV in relation in called Inversions") +
theme(legend.position = "bottom", legend.title=element_blank(), axis.text=element_text(size=12,face="bold"),
axis.title=element_text(size=14,face="bold"), legend.text=element_text(size=14,face="bold"))
grid.arrange(grobs = list(plot2, plot3), ncol=2)
svg(filename="/homes/biertank/rohit/Downloads/scripts/simulation_SVs/accuracy_curves.svg",
height = 8, width = 12, pointsize = 12)
grid.arrange(grobs = list(plot2, plot3), ncol=2)
dev.off()
plot2 <- ggplot(data2, aes(x=data2$Recall, y=data2$Precision, color=factor(data2$Tool),shape=factor(data2$Tool))) +
labs(title="(A)                                            ") +
geom_line() + geom_point() + theme_bw() +
#  theme(axis.title.x = element_text(face = 'bold'),
#                                    axis.title.y = element_text(face = 'bold')) +
ylab("Precision (TP/(TP+FP))") + xlab("Recall (TP/(TP+FN))") +
theme(legend.position = "bottom",legend.title=element_blank(), axis.text=element_text(size=16,face="bold"),
axis.title=element_text(size=18,face="bold"), legend.text=element_text(size=14,face="bold"))
plot3 <- ggplot(data3, aes(x=data3$PPV, y=data3$Sensitivity, label=data3$Tool)) +
labs(title="(B)                                            ") +
geom_point(aes(shape=factor(data3$Tool)), size=3.5, show.legend=F) +
#  geom_point(aes(color=factor(data3$Threshold)), show.legend=F) +
geom_path(aes(color=factor(data3$Tool)), show.legend=T) +
#  geom_point(colour = "black", size = 1.5) +
scale_linetype_manual("", values=c(1,2,3,4)) +
scale_shape_manual("",
values=c(8,9,0,3)) +
scale_color_discrete(name="") +
theme_bw() + #geom_text_repel(point.padding = NA) +
labs(y = "Sensitivity (TP/(TP+FN))", x= "PPV (TP/(TP+FP))") + #, title="Sensitivity and PPV in relation in called Inversions") +
theme(legend.position = "bottom", legend.title=element_blank(), axis.text=element_text(size=16,face="bold"),
axis.title=element_text(size=18,face="bold"), legend.text=element_text(size=14,face="bold"))
svg(filename="/homes/biertank/rohit/Downloads/scripts/simulation_SVs/accuracy_curves.svg",
height = 8, width = 12, pointsize = 12)
grid.arrange(grobs = list(plot2, plot3), ncol=2)
dev.off()
library(ggplot2)
library(gridExtra)
setwd("/homes/biertank/rohit/Downloads/scripts/Genome_annotations/")
dat1 <- read.table(file = "/scr/bloodymary/rohit/Lacerta_viridis/Interpro/domain_pfam_lacertids_top6.txt",header = F,sep = "\t")
plot2 <- ggplot(dat1, aes(x=dat1$V2,y=dat1$V3,fill=factor(dat1$V4))) +
geom_bar(stat="identity", position="dodge", colour="black") +
ylab("Number of pPFAM domains (log-scaled)") +
labs(title="(B)                                            ") +
scale_x_discrete(labels = c("PF00069" = "Protein kinase domain", "PF00076" = "RNA recognition motif (RNP domain)",
"PF00096" = "Zinc finger, C2H2 type", "PF00400" = "WD domain, G-beta repeat",
"PF07679" = "Immunoglobulin I-set domain", "PF12796" = "Ankyrin repeats (3 copies)")) +
theme_bw() + theme(axis.text=element_text(size=14,face="bold"),
axis.title=element_text(size=14,face="bold"),
axis.title.y = element_blank(),legend.position="none") +
scale_fill_manual(guide = guide_legend(title = "Species", reverse=TRUE),
values = c("blue2","green3")) + coord_flip()
dat2 <- read.table(file = "/scr/bloodymary/rohit/Lacerta_viridis/Pfam/abundant_pfams.list",header = F,sep = "\t")
plot1 <- ggplot(dat2, aes(x=dat2$V1,y=log10(dat2$V3),fill=factor(dat2$V2))) +
geom_bar(stat="identity", position="dodge", colour="black") +
ylab("Number of gene family categories (log-scaled)") +
labs(title="(A)                                            ") +
scale_x_discrete(labels = c("PF00096.21" = "C2H2 type zinc finger","PF13637.1" = "Ankyrin repeats (multiple copies)",
"PF13465.1" = "Zinc finger double domain", "PF07679.11" = "Immunoglobulin I-set",
"PF00400.27" = "WD domain (WD40)", "PF13894.1" = "C2H2_4 type zinc finger ",
"PF00023.25" = "Ankyrin repeat", "PF00001.16" = "7 transmembrane receptor")) +
theme_bw() + theme(axis.text=element_text(size=14,face="bold"),
axis.title=element_text(size=14,face="bold"),
axis.title.y = element_blank()) +
scale_fill_manual(guide = guide_legend(title = "Species", reverse=TRUE),
values = c("orangered4","lightsalmon","blue2","green3")) + coord_flip()
grid.arrange(grobs = list(plot1, plot2), ncol=1)
plot1 <- ggplot(dat2, aes(x=dat2$V1,y=log10(dat2$V3),fill=factor(dat2$V2))) +
geom_bar(stat="identity", position="dodge", colour="black") +
ylab("Number of gene family categories (log-scaled)") +
labs(title="(A)                                            ") +
scale_x_discrete(labels = c("PF00096.21" = "C2H2 type zinc finger","PF13637.1" = "Ankyrin repeats (multiple copies)",
"PF13465.1" = "Zinc finger double domain", "PF07679.11" = "Immunoglobulin I-set",
"PF00400.27" = "WD domain (WD40)", "PF13894.1" = "C2H2_4 type zinc finger ",
"PF00023.25" = "Ankyrin repeat", "PF00001.16" = "7 transmembrane receptor")) +
theme_bw() + theme(axis.text=element_text(size=14,face="bold"),
axis.title=element_text(size=14,face="bold"),
axis.title.y = element_blank(), axis.text=element_text(size=12,face="italic")) +
scale_fill_manual(guide = guide_legend(title = "Species", reverse=TRUE),
values = c("orangered4","lightsalmon","blue2","green3")) + coord_flip()
plot1 <- ggplot(dat2, aes(x=dat2$V1,y=log10(dat2$V3),fill=factor(dat2$V2))) +
geom_bar(stat="identity", position="dodge", colour="black") +
ylab("Number of gene family categories (log-scaled)") +
labs(title="(A)                                            ") +
scale_x_discrete(labels = c("PF00096.21" = "C2H2 type zinc finger","PF13637.1" = "Ankyrin repeats (multiple copies)",
"PF13465.1" = "Zinc finger double domain", "PF07679.11" = "Immunoglobulin I-set",
"PF00400.27" = "WD domain (WD40)", "PF13894.1" = "C2H2_4 type zinc finger ",
"PF00023.25" = "Ankyrin repeat", "PF00001.16" = "7 transmembrane receptor")) +
theme_bw() + theme(axis.text=element_text(size=14,face="bold"),
axis.title=element_text(size=14,face="bold"),
axis.title.y = element_blank(), legend.text=element_text(size=12,face="italic")) +
scale_fill_manual(guide = guide_legend(title = "Species", reverse=TRUE),
values = c("orangered4","lightsalmon","blue2","green3")) + coord_flip()
grid.arrange(grobs = list(plot1, plot2), ncol=1)
plot1 <- ggplot(dat2, aes(x=dat2$V1,y=log10(dat2$V3),fill=factor(dat2$V2))) +
geom_bar(stat="identity", position="dodge", colour="black") +
ylab("Number of gene family categories (log-scaled)") +
labs(title="(A)                                            ") +
scale_x_discrete(labels = c("PF00096.21" = "C2H2 type zinc finger","PF13637.1" = "Ankyrin repeats (multiple copies)",
"PF13465.1" = "Zinc finger double domain", "PF07679.11" = "Immunoglobulin I-set",
"PF00400.27" = "WD domain (WD40)", "PF13894.1" = "C2H2_4 type zinc finger ",
"PF00023.25" = "Ankyrin repeat", "PF00001.16" = "7 transmembrane receptor")) +
theme_bw() + theme(axis.text=element_text(size=14,face="bold"),
axis.title=element_text(size=14,face="bold"),
axis.title.y = element_blank(), legend.text=element_text(size=14,face="italic")) +
scale_fill_manual(guide = guide_legend(title = "Species", reverse=TRUE),
values = c("orangered4","lightsalmon","blue2","green3")) + coord_flip()
grid.arrange(grobs = list(plot1, plot2), ncol=1)
plot1 <- ggplot(dat2, aes(x=dat2$V1,y=log10(dat2$V3),fill=factor(dat2$V2))) +
geom_bar(stat="identity", position="dodge", colour="black") +
ylab("Number of gene family categories (log-scaled)") +
labs(title="(A)                                            ") +
scale_x_discrete(labels = c("PF00096.21" = "C2H2 type zinc finger","PF13637.1" = "Ankyrin repeats (multiple copies)",
"PF13465.1" = "Zinc finger double domain", "PF07679.11" = "Immunoglobulin I-set",
"PF00400.27" = "WD domain (WD40)", "PF13894.1" = "C2H2_4 type zinc finger ",
"PF00023.25" = "Ankyrin repeat", "PF00001.16" = "7 transmembrane receptor")) +
theme_bw() + theme(axis.text=element_text(size=14,face="bold"),
axis.title=element_text(size=14,face="bold"),
axis.title.y = element_blank(), legend.text=element_text(size=14,face="bolditalic")) +
scale_fill_manual(guide = guide_legend(title = "Species", reverse=TRUE),
values = c("orangered4","lightsalmon","blue2","green3")) + coord_flip()
grid.arrange(grobs = list(plot1, plot2), ncol=1)
plot1 <- ggplot(dat2, aes(x=dat2$V1,y=log10(dat2$V3),fill=factor(dat2$V2))) +
geom_bar(stat="identity", position="dodge", colour="black") +
ylab("Number of gene family categories (log-scaled)") +
labs(title="(A)                                            ") +
scale_x_discrete(labels = c("PF00096.21" = "C2H2 type zinc finger","PF13637.1" = "Ankyrin repeats (multiple copies)",
"PF13465.1" = "Zinc finger double domain", "PF07679.11" = "Immunoglobulin I-set",
"PF00400.27" = "WD domain (WD40)", "PF13894.1" = "C2H2_4 type zinc finger ",
"PF00023.25" = "Ankyrin repeat", "PF00001.16" = "7 transmembrane receptor")) +
theme_bw() + theme(axis.text=element_text(size=14,face="bold"),
axis.title=element_text(size=14,face="bold"),
axis.title.y = element_blank(), legend.text=element_text(size=14,face="bold.italic")) +
scale_fill_manual(guide = guide_legend(title = "Species", reverse=TRUE),
values = c("orangered4","lightsalmon","blue2","green3")) + coord_flip()
grid.arrange(grobs = list(plot1, plot2), ncol=1)
plot1 <- ggplot(dat2, aes(x=dat2$V1,y=log10(dat2$V3),fill=factor(dat2$V2))) +
geom_bar(stat="identity", position="dodge", colour="black") +
ylab("Number of gene family categories (log-scaled)") +
labs(title="(A)                                            ") +
scale_x_discrete(labels = c("PF00096.21" = "C2H2 type zinc finger","PF13637.1" = "Ankyrin repeats (multiple copies)",
"PF13465.1" = "Zinc finger double domain", "PF07679.11" = "Immunoglobulin I-set",
"PF00400.27" = "WD domain (WD40)", "PF13894.1" = "C2H2_4 type zinc finger ",
"PF00023.25" = "Ankyrin repeat", "PF00001.16" = "7 transmembrane receptor")) +
theme_bw() + theme(axis.text=element_text(size=14,face="bold"), axis.title=element_text(size=14,face="bold"),
axis.title.y = element_blank(), legend.text=element_text(size=14),
legend.text=element_text(size=14,face="bold.italic")) +
scale_fill_manual(guide = guide_legend(title = "Species", reverse=TRUE),
values = c("orangered4","lightsalmon","blue2","green3")) + coord_flip()
plot1 <- ggplot(dat2, aes(x=dat2$V1,y=log10(dat2$V3),fill=factor(dat2$V2))) +
geom_bar(stat="identity", position="dodge", colour="black") +
ylab("Number of gene family categories (log-scaled)") +
labs(title="(A)                                            ") +
scale_x_discrete(labels = c("PF00096.21" = "C2H2 type zinc finger","PF13637.1" = "Ankyrin repeats (multiple copies)",
"PF13465.1" = "Zinc finger double domain", "PF07679.11" = "Immunoglobulin I-set",
"PF00400.27" = "WD domain (WD40)", "PF13894.1" = "C2H2_4 type zinc finger ",
"PF00023.25" = "Ankyrin repeat", "PF00001.16" = "7 transmembrane receptor")) +
theme_bw() + theme(axis.text=element_text(size=14,face="bold"), axis.title=element_text(size=14,face="bold"),
axis.title.y = element_blank(), legend.title=element_text(size=14),
legend.text=element_text(size=14,face="bold.italic")) +
scale_fill_manual(guide = guide_legend(title = "Species", reverse=TRUE),
values = c("orangered4","lightsalmon","blue2","green3")) + coord_flip()
grid.arrange(grobs = list(plot1, plot2), ncol=1)
svg(filename="/homes/biertank/rohit/Downloads/scripts/Genome_annotations/protein_domains_lizards_lacertids.svg",
height = 8, width = 12, pointsize = 12)
grid.arrange(grobs = list(plot1, plot2), ncol=1)
dev.off()
